// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id              String    @id @default(uuid())
  type            String
  tags            String[]
  userId          String    @map("user_id")
  originalUserId  String?   @map("original_user_id")
  postDate        DateTime? @map("post_date")
  isPublished     Boolean   @map("is_published")
  originalId      String?   @map("original_id")
  // video  
  titleVideo      String?   @map("title_video")
  urlVideo        String?   @map("url_video")
  // text
  titleText       String?   @map("title_text")
  previewText     String?   @map("preview_text")
  text            String?
  // quote
  textQuote       String?   @map("text_quote")
  authorQuote     String?   @map("author_quote")
  // photo
  urlPhoto        String?   @map("url_photo")
  // link
  urlLink         String?   @map("url_link")
  descriptionLink String?   @map("description_link")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  isSent    Boolean  @default(false) @map("is_sent")

  comments       Comment[]
  likes          Like[]
  inheritedPosts Post[]    @relation(name: "post_original_fk")

  original       Post?     @relation(name: "post_original_fk", fields: [originalId], references: [id])

  @@index([userId])
  @@index([postDate])
  @@map("posts")
}

model Comment {
  id        String   @id @default(uuid())
  postId    String   @map("post_id")
  userId    String   @map("user_id")
  text      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  id        String   @id @default(uuid())
  postId    String   @map("post_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("likes")
}
